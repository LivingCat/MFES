class StoreTest
operations
	private assertTrue: bool ==> ()
	assertTrue(cond) == return
		pre cond;
		
		-- Simulates assertion checking by reducing it to post-condition checking.
	-- If values are not equal, prints a message in the console and generates 
	-- a post-conditions violation.
	private assertEqual: ? * ? ==> ()
	assertEqual(expected, actual) == return
		post expected = actual;
		
	private testDate: () ==> () 
	testDate() == (
		dcl date : Date;
		
		date := new Date(29,02,2020);
		assertEqual(date.getDate(),"29/02/2020");
		date := new Date(28,02,2019);
		assertEqual(date.getDate(),"28/02/2019");
		date := new Date(04,06,5789);
		assertEqual(date.getDate(),"04/06/5789");
		date := new Date(08,03,2019);
		assertEqual(date.getDate(),"08/03/2019");
	);
	
	private testCreateStore: () ==> ()
	testCreateStore() == (
		dcl store : Store := new Store("Kids2Kids","UK");
		assertEqual(store.getName(),"Kids2Kids");
		assertEqual(store.getCountry(),"UK");
		assertEqual(store.getCash(),0);
	);
		
	private testAddProductClass: () ==> ()
	testAddProductClass() == (
		dcl store : Store := new Store("Kids2Kids","UK",1000);
		dcl pc1 : ProductClass := new ProductClass("food");
		dcl pc2 : ProductClass := new ProductClass("toy");
		
		store.addProductClass(pc1);
		store.addProductClass(pc2);
		assertEqual(store.getNumberOfProductClasses(),2);
		
		assertTrue(exists1 pc in set store.getProductClasses() & pc.getName() = "food");
		assertTrue(exists1 pc in set store.getProductClasses() & pc.getName() = "toy");
	);
	
	private testRemoveProductClass: () ==> ()
	testRemoveProductClass() == (
		dcl store : Store := new Store("Kids2Kids","PT",1000);
		dcl pc1 : ProductClass := new ProductClass("food");
		dcl pc2 : ProductClass := new ProductClass("toy");
		dcl p1 : Product := new Product(pc1,"apple",0.1,0.2);
		dcl p2 : Product := new Product(pc2,"ball",5,6);
		dcl p3 : Product := new Product(pc1,"banana",0.2,0.3);
		
		store.addProductClass(pc1);
		store.addProductClass(pc2);
		store.addProduct(p1,3);
		store.addProduct(p2,2);
		store.addProduct(p3,3);
		
		assertEqual(store.getNumberOfProductClasses(),2);
		assertEqual(store.getNumberOfProducts(),3);
		 
		store.removeProductClass("food");
		assertEqual(store.getNumberOfProductClasses(),1);
		assertEqual(store.getNumberOfProducts(),1);
		assertTrue(not exists pc in set store.getProductClasses() & pc.getName() = "food");
		assertTrue(not exists p in set dom store.getStoreProducts() & p.getClass().getName() = "food");
	);
	
	private testAddProduct: () ==> ()
	testAddProduct() == (
		dcl store : Store := new Store("Kids2Kids","PT",1000);
		dcl pc1 : ProductClass := new ProductClass("toy");
		dcl p1 : Product := new Product(pc1,"doll",5,6);
		dcl products: map Product to nat := {|->};
		
		store.addProductClass(pc1);
		store.addProduct(p1,3);
	--check if we have 1 more product in the product map
		assertEqual(store.getNumberOfProducts(),1);
		assertTrue(exists1 p in set dom store.getStoreProducts() & p.getName() = "doll");
		
		products := store.getStoreProducts();
	--check if we have the right cardinality of the product in the product map
		for all p in set dom products do if (p.getName() = p1.getName()) then assertEqual(3,products(p)); 
		
	);
	
	private testRemoveProduct: () ==> ()
	testRemoveProduct() == (
		dcl store : Store := new Store("Kids2Kids","PT",1000);
		dcl pc1 : ProductClass := new ProductClass("toy");
		dcl p1 : Product := new Product(pc1,"doll",5,6);
		dcl p2 : Product := new Product(pc1,"ball",5,6);
		
		store.addProductClass(pc1);
		store.addProduct(p1,3);
		store.addProduct(p2,2);
		
		--remove ball
		store.removeProduct("ball");
		assertTrue(not exists p in set dom store.getStoreProducts() & p.getName() = "ball");
		store.removeProduct("doll");
		assertTrue(not exists p in set dom store.getStoreProducts() & p.getName() = "doll");
		--check if the store still has the "toy" class
		assertEqual(store.getNumberOfProductClasses(),1);
		--check if store has 0 products
		assertEqual(store.getNumberOfProducts(),0);

	);
	
	private testAddStock: () ==> ()
	testAddStock() == (
		dcl store : Store := new Store("Kids2Kids","PT",1000);
		dcl pc1 : ProductClass := new ProductClass("food");
		dcl p1 : Product := new Product(pc1,"apple",0.1,0.2);
		dcl p2 : Product := new Product(pc1,"banana",0.2,0.3);
		dcl products: map Product to nat := {|->};
		
		store.addProductClass(pc1);
		--store add 2 apples
		store.addProduct(p1,2);
		--now store has 4 more apples
		store.addStock(p1,4);
		--store add 0 bananas
		store.addProduct(p2,0);
		--now store has 3 bananas
		store.addStock(p2,3);
		
		products := store.getStoreProducts();
		for all p in set dom products do if (p.getName() = p1.getName()) then assertEqual(6,products(p)); 
		for all p in set dom products do if (p.getName() = p2.getName()) then assertEqual(3,products(p)); 
	);
	

	private testBuyFromClient: () ==> ()
	testBuyFromClient() == (
		dcl store : Store := new Store("Kids2Kids","PT",1000);
		dcl pc1 : ProductClass := new ProductClass("toy");
		dcl p1 : Product := new Product(pc1,"doll",0.1,0.2);
		dcl p2 : Product := new Product(pc1,"cube",0.2,0.3);
		dcl bought : map Product to nat1 := {p1|->2, p2 |-> 3};
		dcl client : Client := new Client("maria");
		dcl date : Date := new Date(30,12,2018);
		dcl purchase: PurchaseFromClient;
		dcl products: map Product to nat := {|->};
		dcl cash: real := store.getCash();
		
		store.addProductClass(pc1);
		store.addProduct(p1,1);
		store.addProduct(p2,0);
		
		purchase := store.buy(bought,client,date);
		
		--check if grand total was calculated correctly
		assertEqual(purchase.getGrandTotal(),0.8);
		
		--check if we have a new purchase in the purchase map
		assertEqual(store.getNumberOfPurchases(),1);
		assertTrue(exists1 p in set store.getPurchases() & isofclass(PurchaseFromClient,p) => narrow_(p,PurchaseFromClient).getClient().getName() = "maria");
		assertTrue(exists1 p in set store.getPurchases() & p.getDate().getDate() = "30/12/2018");
		assertTrue(exists1 p in set store.getPurchases() & card ({p1,p2} inter dom p.getProducts()) = 2);
		
		--check if the products quantity increased
		products := store.getStoreProducts();
		for all p in set dom products do if(p.getName() = p1.getName() or p.getName() = p2.getName()) then assertEqual(3,products(p));
		--check if cash decreased
		assertEqual(store.getCash(),cash - 0.8);
	);
	
	private testBuyFromSupplier: () ==> ()
	testBuyFromSupplier() == (
		dcl store : Store := new Store("Kids2Kids","PT",1000);
		dcl pc1 : ProductClass := new ProductClass("toy");
		dcl pc2 : ProductClass := new ProductClass("food");
		dcl p1 : Product := new Product(pc1,"doll",0.1,0.2);
		dcl p2 : Product := new Product(pc2,"apple",0.1,0.2);
		dcl bought : map Product to nat1 := {p1|->2, p2 |-> 3};
		dcl supplier : Supplier := new Supplier("joao");
		dcl date : Date := new Date(30,12,2018);
		dcl purchase: PurchaseFromSupplier;
		dcl products: map Product to nat := {|->};
		dcl cash: real := store.getCash();
		
		store.addProductClass(pc1);
		store.addProductClass(pc2);
		store.addProduct(p1,1);
		store.addProduct(p2,0);
		products := store.getStoreProducts();
		assertTrue(products(p1) = 1);
		assertTrue(products(p2) = 0);
		
		purchase := store.buy(bought,supplier,date);
		
		--check if grand total was calculated correctly
		assertEqual(purchase.getGrandTotal(),0.5);
		
		--check if we have a new purchase in the purchase map
		assertTrue(store.getNumberOfPurchases() = 1);
		assertTrue(exists1 p in set store.getPurchases() & isofclass(PurchaseFromSupplier,p) => narrow_(p,PurchaseFromSupplier).getSupplier().getName() = "joao");
		assertTrue(exists1 p in set store.getPurchases() & p.getDate().getDate() = "30/12/2018");
		assertTrue(exists1 p in set store.getPurchases() & card ({p1,p2} inter dom p.getProducts()) = 2);
		
		--check if the products quantity increased
		products := store.getStoreProducts();
		
		for all p in set dom products do if(p.getName() = p1.getName() or p.getName() = p2.getName()) then assertEqual(3,products(p));
		--check if cash decreased
		assertEqual(store.getCash(),cash - 0.5);
	);
	
private testSell: () ==> ()
	testSell() == (
		dcl store : Store := new Store("Kids2Kids","PT",1000);
		dcl pc1 : ProductClass := new ProductClass("toy");
		dcl pc2 : ProductClass := new ProductClass("food");
		dcl p1 : Product := new Product(pc1,"doll",0.1,0.2);
		dcl p2 : Product := new Product(pc2,"apple",0.1,0.2);
		dcl sold : map Product to nat1 := {p1|->1, p2 |-> 1};
		dcl client : Client := new Client("joao");
		dcl date : Date := new Date(30,12,2018);
		dcl sale: Sale;
		dcl products: map Product to nat := {|->};
		dcl cash: real := store.getCash();
		
		store.addProductClass(pc1);
		store.addProductClass(pc2);
		store.addProduct(p1,5);
		store.addProduct(p2,5);
		products := store.getStoreProducts();
		
		sale := store.sell(sold,client,date);
		
		--check if grand total was calculated correctly
		assertEqual(sale.getGrandTotal(),0.4);
		
		--check if we have a new sale in the sale set
		assertTrue(store.getNumberOfSales() = 1);
		assertTrue(exists1 s in set store.getSales() & s.getClient().getName() = "joao");
		assertTrue(exists1 s in set store.getSales() & s.getDate().getDate() = "30/12/2018");
		assertTrue(exists1 s in set store.getSales() & card ({p1,p2} inter dom s.getProducts()) = 2);
		
		--check if the products quantity decreased
		products := store.getStoreProducts();
		
		for all p in set dom products do if(p.getName() = p1.getName() or p.getName() = p2.getName()) then assertEqual(4,products(p));
		--check if cash increased
		assertEqual(store.getCash(),cash + 0.4);
	);

	public static main: () ==> ()
	main() == (
		dcl testSuite : StoreTest := new StoreTest();
		
		testSuite.testDate();
		testSuite.testCreateStore();
		testSuite.testAddProductClass();
		testSuite.testRemoveProductClass();
		testSuite.testAddProduct();
		testSuite.testRemoveProduct();
		testSuite.testAddStock();
		testSuite.testBuyFromClient();
		testSuite.testBuyFromSupplier();
		testSuite.testSell();
	);
	
	
end StoreTest