class Date

/*
	Defines the type date used to store the transaction date.
*/

instance variables
  day:nat1;
  month:nat1;
  year:nat1;
  inv month <= 12 and day <= daysOfMonth(month, year) -- a month cannot be bigger than 12 and a day cannot
  																										-- be bigger than the maximum number of days 
  																										-- in that month
  
operations
	-- Calculates the maximum number of days in a month
	-- m - month
	-- y - year
	-- Returns number of days
	pure private daysOfMonth: nat1 * nat1 ==> nat1
		daysOfMonth(m, y) == (
			if (m = 4 or m = 6 or m = 9 or m = 11) then return 30
			elseif m = 2 then (
			 dcl leapyear: bool := ((y mod 4) = 0 and (y mod 100) <> 0) or (y mod 400 = 0);
			 if leapyear then return 29
			 else return 28
			) 
			else return 31
		);
	
	-- Converts a nat digit to a char
	-- n - digit to convert
	-- Returns char with digit
	private digitToChar: nat ==> char
	digitToChar(n) == (
		cases n:
			0 -> return '0',
			1 -> return '1',
			2 -> return '2',
			3 -> return '3',
			4 -> return '4',
			5 -> return '5',
			6 -> return '6',
			7 -> return '7',
			8 -> return '8',
			others -> return '9'
		end;
	)
	pre n < 10; -- Number needs to be less than 10 to be a digit
	
	-- Converts a nat number to a seq of char (string)
	-- n - number to convert
	-- Returns string with number
	private natToString: nat ==> seq of (char)
	natToString(n) == (
		dcl string : seq of (char) := [];
		dcl cpy : nat := n;
		
		while(cpy > 0) do (
			dcl digit : nat := cpy mod 10;
			cpy := cpy div 10;
			string := [digitToChar(digit)] ^ string;
		);
		
		return string;
	); 
	
	-- Converts a object of class date to a string with the following type dd/mm/yyyy
	public getDate: () ==> seq of (char)
	getDate() == (
		dcl d : seq of (char) := [];
		dcl m : seq of (char) := [];
		
		if(day < 10) then d := d ^ ['0'];
		if(month < 10) then m := m ^ ['0'];
		return d ^ natToString(day) ^ ['/'] ^ m ^ natToString(month) ^ ['/'] ^ natToString(year);
	);

	-- Constructor for class date
	-- d - day
	-- m - month
	-- y - year
	-- Returns a date object
	public Date: nat1 * nat1 * nat1 ==> Date
		Date(d,m,y) == (atomic(day := d; month := m; year := y;); return self;)
	
end Date
